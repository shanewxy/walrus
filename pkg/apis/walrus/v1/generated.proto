// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.seal_io.walrus.pkg.apis.walrus.v1;

import "github.com/seal-io/walrus/pkg/apis/walruscore/v1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/seal-io/walrus/pkg/apis/walrus/v1";

// Catalog is the schema for the catalogs API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],subResources=["status"]
message Catalog {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.CatalogSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.CatalogStatus status = 3;
}

// CatalogList holds the list of Catalog.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message CatalogList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.Catalog items = 2;
}

// Connector is the schema for the connectors API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["conn"],subResources=["status"]
message Connector {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ConnectorSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ConnectorStatus status = 3;
}

// ConnectorBinding is the schema for the connectorbindings API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["cb"],subResources=["status"]
message ConnectorBinding {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ConnectorBindingSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ConnectorBindingStatus status = 3;
}

// ConnectorBindingList contains a list of ConnectorBinding.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ConnectorBindingList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.ConnectorBinding items = 2;
}

// ConnectorList holds the list of Connector.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ConnectorList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.Connector items = 2;
}

// Environment is the schema for the environments API.
//
// +genclient
// +genclient:onlyVerbs=create,get,list,watch,apply,update,patch,delete,deleteCollection
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["env"]
message Environment {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional EnvironmentSpec spec = 2;

  optional EnvironmentStatus status = 3;
}

// EnvironmentList holds the list of Environment.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message EnvironmentList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Environment items = 2;
}

// EnvironmentSpec defines the desired state of Environment.
message EnvironmentSpec {
  // Type is the type of the environment.
  //
  // +k8s:validation:enum=["Development","Staging","Production"]
  optional string type = 1;

  // DisplayName is the display name of the environment.
  optional string displayName = 2;

  // Description is the description of the environment.
  optional string description = 3;
}

// EnvironmentStatus defines the observed state of Environment.
message EnvironmentStatus {
  // Project is the project that the environment belongs to.
  optional string project = 1;

  // Phase is the current phase of the environment.
  optional string phase = 2;
}

// FileExample is the schema for the file example API.
//
// +genclient
// +genclient:onlyVerbs=get,list
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"]
message FileExample {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional FileExampleStatus status = 2;
}

// FileExampleList holds the list of FileExample.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message FileExampleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated FileExample items = 2;
}

// FileExampleStatus defines the observed state of FileExample.
message FileExampleStatus {
  // Icon is the icon of the file example.
  optional string icon = 1;

  // Readme is the readme of the file example.
  optional string readme = 2;

  // Content is the content of the file example.
  optional string content = 3;
}

// Project is the schema for the projects API.
//
// +genclient
// +genclient:onlyVerbs=create,get,list,watch,apply,update,patch,delete,deleteCollection
// +genclient:method=GetSubjects,verb=get,subresource=subjects,result=ProjectSubjects
// +genclient:method=UpdateSubjects,verb=update,subresource=subjects,input=ProjectSubjects,result=ProjectSubjects
// +genclient:method=PatchSubjects,verb=update,subresource=subjects,input=ProjectSubjects,result=ProjectSubjects
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["proj"]
message Project {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional ProjectSpec spec = 2;

  optional ProjectStatus status = 3;
}

// ProjectList holds the list of Project.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ProjectList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Project items = 2;
}

// ProjectSpec defines the desired state of Project.
message ProjectSpec {
  // DisplayName is the display name of the project.
  optional string displayName = 1;

  // Description is the description of the project.
  optional string description = 2;
}

// ProjectStatus defines the observed state of Project.
message ProjectStatus {
  // Phase is the current phase of the project.
  optional string phase = 1;
}

// ProjectSubject is the schema for the project subject API.
message ProjectSubject {
  optional SubjectReference subjectReference = 1;

  // Role is the project role of the subject.
  //
  // +k8s:validation:enum=["Viewer","Member","Owner"]
  optional string role = 2;
}

// ProjectSubjects holds the list of ProjectSubject.
//
// ProjectSubjects is the subresource of Project to manage the subjects.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["projsub"]
message ProjectSubjects {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +patchStrategy=merge
  // +patchMergeKey=name
  // +listType=map
  // +listMapKey=name
  repeated ProjectSubject items = 2;
}

// Resource is the schema for the resources API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["res"],subResources=["status"]
message Resource {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceStatus status = 3;
}

// ResourceComponents is the schema for the resource components API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["rescomps"]
message ResourceComponents {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceComponentsSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceComponentsStatus status = 3;
}

// ResourceComponentsList holds the list of ResourceComponents.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ResourceComponentsList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceComponents items = 2;
}

// ResourceDefinition is the schema for the resource definitions API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["resdef"],subResources=["status"]
message ResourceDefinition {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceDefinitionSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceDefinitionStatus status = 3;
}

// ResourceDefinitionList holds the list of ResourceDefinition.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ResourceDefinitionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceDefinition items = 2;
}

// ResourceList holds the list of Resource.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ResourceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.Resource items = 2;
}

// ResourceRun is the schema for the resource runs API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["resrun"],subResources=["status"]
message ResourceRun {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceRunSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceRunStatus status = 3;
}

// ResourceRunList holds the list of ResourceRun.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message ResourceRunList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.ResourceRun items = 2;
}

// Schema is the schema for the schemas API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"]
message Schema {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.SchemaStatus status = 2;
}

// SchemaList holds the list of Schema.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SchemaList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.Schema items = 2;
}

// Setting is the schema for the settings API.
//
// +genclient
// +genclient:onlyVerbs=get,list,watch,apply,update,patch
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["set"]
message Setting {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SettingSpec spec = 2;

  optional SettingStatus status = 3;
}

// SettingList holds the list of Setting.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SettingList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Setting items = 2;
}

// SettingSpec defines the desired state of Setting.
message SettingSpec {
  // Value contains the configuration data,
  // it is provided as a write-only input field.
  optional string value = 1;
}

// SettingStatus defines the observed state of Setting.
message SettingStatus {
  // Description is the description of the settings,
  // it is readonly.
  optional string description = 1;

  // Hidden indicates whether the setting is hidden on UI,
  // it is readonly.
  optional bool hidden = 2;

  // Editable indicates whether the setting is editable on UI,
  // it is readonly.
  optional bool editable = 3;

  // Sensitive indicates whether the setting is sensitive,
  // it is readonly.
  optional bool sensitive = 4;

  // Value is the current value of the setting,
  // it is provided as a read-only output field.
  //
  // "(sensitive)" returns if the setting is sensitive.
  optional string value = 5;
}

// Subject is the schema for the subjects API.
//
// +genclient
// +genclient:onlyVerbs=create,get,list,watch,apply,update,patch,delete,deleteCollection
// +genclient:method=Login,verb=create,subresource=login,input=SubjectLogin,result=SubjectLogin
// +genclient:method=CreateToken,verb=create,subresource=token,input=SubjectToken,result=SubjectToken
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["subj"]
message Subject {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SubjectSpec spec = 2;
}

// SubjectList holds the list of Subject.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SubjectList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Subject items = 2;
}

// SubjectLogin is the subresource of the Subject resource for login request.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"]
message SubjectLogin {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SubjectLoginSpec spec = 2;

  optional SubjectLoginStatus status = 3;
}

// SubjectLoginSpec defines the desired state of SubjectLogin.
message SubjectLoginSpec {
  // Credential is the credential of the subject,
  // it is provided as a write-only input field.
  //
  // +k8s:validation:format="password"
  optional string credential = 1;
}

// SubjectLoginStatus defines the observed state of SubjectLogin.
message SubjectLoginStatus {
  // Token is the token of the SubjectLogin.
  optional string token = 1;
}

// SubjectProvider is the schema for the subject providers API.
//
// +genclient
// +genclient:onlyVerbs=create,get,list,watch,apply,update,patch,delete,deleteCollection
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["subjprov"]
message SubjectProvider {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SubjectProviderSpec spec = 2;

  optional SubjectProviderStatus status = 3;
}

// SubjectProviderBitbucketConfig defines the configuration of the Bitbucket.
message SubjectProviderBitbucketConfig {
  // ClientID is the client ID of the Bitbucket client.
  optional string clientID = 1;

  // ClientSecret is the client secret of the Bitbucket client.
  optional string clientSecret = 2;

  // Groups are used to filter out which groups should be matched.
  repeated string groups = 3;
}

// SubjectProviderExternalConfig defines the configuration of the subject provider.
message SubjectProviderExternalConfig {
  // LDAP is the configuration of the LDAP.
  optional SubjectProviderLDAPConfig ldap = 1;

  // OAuth is the configuration of the OAuth 2.0.
  optional SubjectProviderOAuthConfig oauth = 2;

  // OIDC is the configuration of the OpenID Connect.
  optional SubjectProviderOIDCConfig oidc = 3;

  // GitHub is the configuration of the GitHub.
  optional SubjectProviderGitHubConfig github = 4;

  // GitLab is the configuration of the GitLab.
  optional SubjectProviderGitLabConfig gitlab = 5;

  // Bitbucket is the configuration of the Bitbucket.
  optional SubjectProviderBitbucketConfig bitbucket = 6;

  // Gitea is the configuration of the Gitea.
  optional SubjectProviderGiteaConfig gitea = 7;

  // Google is the configuration of the Google.
  optional SubjectProviderGoogleConfig google = 8;

  // Microsoft is the configuration of the Microsoft.
  optional SubjectProviderMicrosoftConfig microsoft = 9;
}

// SubjectProviderGitHubConfig defines the configuration of the GitHub.
message SubjectProviderGitHubConfig {
  // ClientID is the client ID of the GitHub client.
  optional string clientID = 1;

  // ClientSecret is the client secret of the GitHub client.
  optional string clientSecret = 2;

  // Groups are used to filter out which groups should be matched.
  //
  // Each item is in the form of "organization:team".
  repeated string groups = 3;
}

// SubjectProviderGitLabConfig defines the configuration of the GitLab.
message SubjectProviderGitLabConfig {
  // ClientID is the client ID of the GitLab client.
  optional string clientID = 1;

  // ClientSecret is the client secret of the GitLab client.
  optional string clientSecret = 2;

  // Groups are used to filter out which groups should be matched.
  repeated string groups = 3;
}

// SubjectProviderGiteaConfig defines the configuration of the Gitea.
message SubjectProviderGiteaConfig {
  // ClientID is the client ID of the Gitea client.
  optional string clientID = 1;

  // ClientSecret is the client secret of the Gitea client.
  optional string clientSecret = 2;

  // Groups is used to filter out which groups should be matched.
  //
  // Each item is in the form of "organization:team".
  repeated string groups = 3;
}

// SubjectProviderGoogleConfig defines the configuration of the Google.
message SubjectProviderGoogleConfig {
  // ClientID is the client ID of the Google client.
  optional string clientID = 1;

  // ClientSecret is the client secret of the Google client.
  optional string clientSecret = 2;

  // Groups are used to filter out which groups should be matched.
  repeated string groups = 3;
}

// SubjectProviderLDAPConfig defines the configuration of the LDAP.
message SubjectProviderLDAPConfig {
  // Host is the host of the LDAP server,
  // which in form of "hostname:port".
  //
  // If the port is not specified,
  // the default port 636 will be used.
  optional string host = 1;

  // SkipInsecureVerify is the flag to skip the insecure verify.
  optional bool skipInsecureVerify = 2;

  // ServiceAccountDN is the distinguished name of the service account of the LDAP server.
  // It is used to search other users.
  optional string serviceAccountDN = 3;

  // ServiceAccountPassword is the password of the service account of the LDAP server.
  optional string serviceAccountPassword = 4;

  // GroupSearch is the group search configuration of the LDAP.
  //
  // It maps a group to a list of users.
  optional SubjectProviderLDAPGroupSearch groupSearch = 5;

  // UserSearch is the user search configuration of the LDAP.
  //
  // It maps a username and password entered by a user to the LDAP entry.
  optional SubjectProviderLDAPUserSearch userSearch = 6;
}

// SubjectProviderLDAPGroupSearch defines the group search configuration of the LDAP.
message SubjectProviderLDAPGroupSearch {
  // BaseDN to start the search from.
  optional string baseDN = 1;

  // Filter to apply to the search.
  //
  // +default="(objectClass=group)"
  optional string filter = 2;

  // UserMatchers is the user matcher list for the LDAP group search.
  repeated SubjectProviderLdapGroupSearchUserMatcher userMatchers = 3;

  // NameAttribute is the attribute to use as the group name.
  //
  // +default="name"
  optional string nameAttribute = 4;
}

// SubjectProviderLDAPUserSearch defines the user search configuration of the LDAP.
message SubjectProviderLDAPUserSearch {
  // BaseDN to start the search from.
  optional string baseDN = 1;

  // Filter to apply to the search.
  //
  // +default="(objectClass=person)"
  optional string filter = 2;

  // NameAttribute is the attribute to use as the username.
  //
  // +default="uid"
  optional string nameAttribute = 3;

  // DisplayNameAttribute is the attribute to use as the display name.
  //
  // +default="cn"
  optional string displayNameAttribute = 4;

  // EmailAttribute is the attribute to use as the email.
  //
  // +default="mail"
  optional string emailAttribute = 5;
}

// SubjectProviderLdapGroupSearchUserMatcher defines the user matcher of the LDAP group search.
message SubjectProviderLdapGroupSearchUserMatcher {
  // GroupAttribute is the attribute of the group.
  optional string groupAttribute = 1;

  // UserAttribute is the attribute of the user.
  optional string userAttribute = 2;
}

// SubjectProviderList holds the list of SubjectProvider.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message SubjectProviderList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated SubjectProvider items = 2;
}

// SubjectProviderMicrosoftConfig defines the configuration of the Microsoft.
message SubjectProviderMicrosoftConfig {
  // ClientID is the client ID of the Microsoft client.
  optional string clientID = 1;

  // ClientSecret is the client secret of the Microsoft client.
  optional string clientSecret = 2;

  // Tenant is the tenant of the Microsoft client.
  //
  // The tenant is the directory that the user is in.
  //
  // +default="common"
  // +k8s:validation:enum=["common","organizations","consumers"]
  optional string tenant = 3;

  // Groups are used to filter out which groups should be matched.
  repeated string groups = 4;
}

// SubjectProviderOAuthClaimMapping defines the claim mapping of the OAuth.
message SubjectProviderOAuthClaimMapping {
  // NameKey is the key to pick "name" from claim.
  //
  // +default="preferred_username"
  optional string nameKey = 1;

  // DisplayNameKey is the key to pick "displayName" from claim.
  //
  // +default="name"
  optional string displayNameKey = 2;

  // EmailKey is the key to pick "email" from claim.
  //
  // +default="email"
  optional string emailKey = 3;

  // GroupsKey is the key to pick "groups" from claim.
  //
  // +default="groups"
  optional string groupsKey = 4;
}

// SubjectProviderOAuthConfig defines the configuration of the OAuth 2.0.
message SubjectProviderOAuthConfig {
  // AuthorizationEndpoint is the endpoint to authorize.
  optional string authorizationEndpoint = 1;

  // TokenEndpoint is the endpoint to get OAuth token.
  optional string tokenEndpoint = 2;

  // UserinfoEndpoint is the endpoint to get the user info.
  optional string userinfoEndpoint = 3;

  // SkipInsecureVerify is the flag to skip the insecure verify.
  optional bool skipInsecureVerify = 4;

  // ClientID is the ID of the OAuth client.
  optional string clientID = 5;

  // ClientSecret is the secret of the OAuth client.
  optional string clientSecret = 6;

  // ClaimMapping is the claim mapping of the OpenID Connect.
  optional SubjectProviderOAuthClaimMapping claimMapping = 7;
}

// SubjectProviderOIDCConfig defines the configuration of the OpenID Connect.
message SubjectProviderOIDCConfig {
  // Issuer is the URL of the OpenID Connect issuer.
  //
  // This field is only used when the provider is set to "custom".
  //
  // Canonical URL of the provider, also used for configuration discovery.
  // This value MUST match the value returned in the provider config discovery.
  //
  // See: https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig
  optional string issuer = 1;

  // SkipInsecureVerify is the flag to skip the insecure verify.
  optional bool skipInsecureVerify = 2;

  // ClientID is the client ID of the OpenID Connect client.
  optional string clientID = 3;

  // ClientSecret is the client secret of the OpenID Connect client.
  optional string clientSecret = 4;

  // ClaimMapping is the claim mapping of the OpenID Connect.
  optional SubjectProviderOAuthClaimMapping claimMapping = 5;
}

// SubjectProviderSpec defines the desired state of SubjectProvider.
message SubjectProviderSpec {
  // Type is the type of the subject provider,
  // which is immutable.
  //
  // +k8s:validation:enum=["Internal","LDAP","OIDC","OAuth","GitHub","GitLab","Bitbucket","Gitea","Google","Microsoft"]
  optional string type = 1;

  // DisplayName is the display name of the subject provider.
  optional string displayName = 2;

  // Description is the description of the subject provider.
  optional string description = 3;

  // ExternalConfig is the configuration of the external subject provider.
  optional SubjectProviderExternalConfig externalConfig = 4;
}

// SubjectProviderStatus defines the observed state of SubjectProvider.
message SubjectProviderStatus {
  // LoginWithPassword is the flag to indicate whether the provider supports login with password.
  optional bool loginWithPassword = 1;
}

// SubjectReference is the reference of the subject.
message SubjectReference {
  // Namespace is the namespace of the subject.
  optional string namespace = 1;

  // Name is the name of the subject.
  optional string name = 2;
}

// SubjectSpec defines the desired state of Subject.
message SubjectSpec {
  // Provider is the name of subject provider who provides this subject,
  // which is immutable.
  optional string provider = 1;

  // Role is the role of the subject.
  //
  // +k8s:validation:enum=["User","Manager","Admin"]
  optional string role = 2;

  // DisplayName is the display name of the subject.
  optional string displayName = 3;

  // Description is the description of the subject.
  optional string description = 4;

  // Email is the email of the subject.
  //
  // +k8s:validation:format="email"
  optional string email = 5;

  // Groups is the groups that the subject belongs to.
  //
  // +k8s:validation:uniqueItems=true
  repeated string groups = 6;

  // Credential is the credential of the subject,
  // it is provided as a write-only input field.
  //
  // +k8s:validation:format="password"
  optional string credential = 7;
}

// SubjectToken is the subresource of the Subject resource for token request.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"]
message SubjectToken {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional SubjectTokenSpec spec = 2;

  optional SubjectTokenStatus status = 3;
}

// SubjectTokenSpec defines the desired state of SubjectToken.
message SubjectTokenSpec {
  // ExpirationSeconds is the requested duration of validity of the request. The
  // token issuer may return a token with a different validity duration so a
  // client needs to check the 'expiration' field in a response.
  //
  // The value must be non-negative.
  // The maximum value is controlled by the loopback Kubernetes Cluster ApiServer.
  //
  // +optional
  // +k8s:validation:minimum=0
  // +k8s:validation:exclusiveMinimum
  optional int64 expirationSeconds = 1;
}

// SubjectTokenStatus defines the observed state of SubjectToken.
message SubjectTokenStatus {
  // Token is the token of the SubjectToken.
  optional string token = 1;

  // ExpirationTimestamp is the time of expiration of the returned token.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time expirationTimestamp = 2;
}

// Template is the schema for the templates API.
//
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["tpl"],subResources=["status"]
message Template {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.TemplateSpec spec = 2;

  optional github.com.seal_io.walrus.pkg.apis.walruscore.v1.TemplateStatus status = 3;
}

// TemplateList holds the list of Template.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message TemplateList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated github.com.seal_io.walrus.pkg.apis.walruscore.v1.Template items = 2;
}

// Variable is the schema for the variables API.
//
// +genclient
// +genclient:onlyVerbs=create,get,list,watch,apply,update,patch,delete,deleteCollection
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:apireg-gen:resource:scope="Namespaced",categories=["walrus"],shortName=["var"]
message Variable {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VariableSpec spec = 2;

  optional VariableStatus status = 3;
}

// VariableList holds the list of Variable.
//
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
message VariableList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Variable items = 2;
}

// VariableSpec defines the desired state of Variable.
message VariableSpec {
  // Value contains the configuration data,
  // it is provided as a write-only input field.
  optional string value = 1;

  // Sensitive indicates whether the variable is sensitive.
  optional bool sensitive = 2;
}

// VariableStatus defines the observed state of Variable.
message VariableStatus {
  // Scope is the scope of the variable.
  //
  // +k8s:validation:enum=["System","Project","Environment"]
  optional string scope = 1;

  // Value is the current value of the setting,
  // it is provided as a read-only output field.
  //
  // "(sensitive)" returns if the variable is sensitive.
  optional string value = 2;
}

