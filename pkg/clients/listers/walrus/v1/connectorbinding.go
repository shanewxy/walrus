// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	v1 "github.com/seal-io/walrus/pkg/apis/walrus/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConnectorBindingLister helps list ConnectorBindings.
// All objects returned here must be treated as read-only.
type ConnectorBindingLister interface {
	// List lists all ConnectorBindings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ConnectorBinding, err error)
	// ConnectorBindings returns an object that can list and get ConnectorBindings.
	ConnectorBindings(namespace string) ConnectorBindingNamespaceLister
	ConnectorBindingListerExpansion
}

// connectorBindingLister implements the ConnectorBindingLister interface.
type connectorBindingLister struct {
	indexer cache.Indexer
}

// NewConnectorBindingLister returns a new ConnectorBindingLister.
func NewConnectorBindingLister(indexer cache.Indexer) ConnectorBindingLister {
	return &connectorBindingLister{indexer: indexer}
}

// List lists all ConnectorBindings in the indexer.
func (s *connectorBindingLister) List(selector labels.Selector) (ret []*v1.ConnectorBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ConnectorBinding))
	})
	return ret, err
}

// ConnectorBindings returns an object that can list and get ConnectorBindings.
func (s *connectorBindingLister) ConnectorBindings(namespace string) ConnectorBindingNamespaceLister {
	return connectorBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConnectorBindingNamespaceLister helps list and get ConnectorBindings.
// All objects returned here must be treated as read-only.
type ConnectorBindingNamespaceLister interface {
	// List lists all ConnectorBindings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ConnectorBinding, err error)
	// Get retrieves the ConnectorBinding from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ConnectorBinding, error)
	ConnectorBindingNamespaceListerExpansion
}

// connectorBindingNamespaceLister implements the ConnectorBindingNamespaceLister
// interface.
type connectorBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConnectorBindings in the indexer for a given namespace.
func (s connectorBindingNamespaceLister) List(selector labels.Selector) (ret []*v1.ConnectorBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ConnectorBinding))
	})
	return ret, err
}

// Get retrieves the ConnectorBinding from the indexer for a given namespace and name.
func (s connectorBindingNamespaceLister) Get(name string) (*v1.ConnectorBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.SchemeResource("connectorbinding"), name)
	}
	return obj.(*v1.ConnectorBinding), nil
}
