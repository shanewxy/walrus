// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

// ConnectorConfigApplyConfiguration represents an declarative configuration of the ConnectorConfig type for use
// with apply.
type ConnectorConfigApplyConfiguration struct {
	Version *string                                           `json:"version,omitempty"`
	Data    map[string]ConnectorConfigEntryApplyConfiguration `json:"data,omitempty"`
}

// ConnectorConfigApplyConfiguration constructs an declarative configuration of the ConnectorConfig type for use with
// apply.
func ConnectorConfig() *ConnectorConfigApplyConfiguration {
	return &ConnectorConfigApplyConfiguration{}
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *ConnectorConfigApplyConfiguration) WithVersion(value string) *ConnectorConfigApplyConfiguration {
	b.Version = &value
	return b
}

// WithData puts the entries into the Data field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Data field,
// overwriting an existing map entries in Data field with the same key.
func (b *ConnectorConfigApplyConfiguration) WithData(entries map[string]ConnectorConfigEntryApplyConfiguration) *ConnectorConfigApplyConfiguration {
	if b.Data == nil && len(entries) > 0 {
		b.Data = make(map[string]ConnectorConfigEntryApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.Data[k] = v
	}
	return b
}
