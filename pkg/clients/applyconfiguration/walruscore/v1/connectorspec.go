// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	v1 "github.com/seal-io/walrus/pkg/apis/walruscore/v1"
)

// ConnectorSpecApplyConfiguration represents an declarative configuration of the ConnectorSpec type for use
// with apply.
type ConnectorSpecApplyConfiguration struct {
	ApplicableEnvironmentType *v1.EnvironmentType                `json:"applicableEnvironmentType,omitempty"`
	Category                  *v1.ConnectorCategory              `json:"category,omitempty"`
	Type                      *string                            `json:"type,omitempty"`
	Config                    *ConnectorConfigApplyConfiguration `json:"config,omitempty"`
	Description               *string                            `json:"description,omitempty"`
	SecretName                *string                            `json:"secretName,omitempty"`
}

// ConnectorSpecApplyConfiguration constructs an declarative configuration of the ConnectorSpec type for use with
// apply.
func ConnectorSpec() *ConnectorSpecApplyConfiguration {
	return &ConnectorSpecApplyConfiguration{}
}

// WithApplicableEnvironmentType sets the ApplicableEnvironmentType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ApplicableEnvironmentType field is set to the value of the last call.
func (b *ConnectorSpecApplyConfiguration) WithApplicableEnvironmentType(value v1.EnvironmentType) *ConnectorSpecApplyConfiguration {
	b.ApplicableEnvironmentType = &value
	return b
}

// WithCategory sets the Category field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Category field is set to the value of the last call.
func (b *ConnectorSpecApplyConfiguration) WithCategory(value v1.ConnectorCategory) *ConnectorSpecApplyConfiguration {
	b.Category = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ConnectorSpecApplyConfiguration) WithType(value string) *ConnectorSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithConfig sets the Config field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Config field is set to the value of the last call.
func (b *ConnectorSpecApplyConfiguration) WithConfig(value *ConnectorConfigApplyConfiguration) *ConnectorSpecApplyConfiguration {
	b.Config = value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *ConnectorSpecApplyConfiguration) WithDescription(value string) *ConnectorSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithSecretName sets the SecretName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretName field is set to the value of the last call.
func (b *ConnectorSpecApplyConfiguration) WithSecretName(value string) *ConnectorSpecApplyConfiguration {
	b.SecretName = &value
	return b
}
