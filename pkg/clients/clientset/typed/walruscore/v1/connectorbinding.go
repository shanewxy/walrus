// SPDX-FileCopyrightText: 2024 Seal, Inc
// SPDX-License-Identifier: Apache-2.0

// Code generated by "walrus", DO NOT EDIT.

package v1

import (
	"context"
	json "encoding/json"
	"fmt"
	"time"

	v1 "github.com/seal-io/walrus/pkg/apis/walruscore/v1"
	walruscorev1 "github.com/seal-io/walrus/pkg/clients/applyconfiguration/walruscore/v1"
	scheme "github.com/seal-io/walrus/pkg/clients/clientset/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ConnectorBindingsGetter has a method to return a ConnectorBindingInterface.
// A group's client should implement this interface.
type ConnectorBindingsGetter interface {
	ConnectorBindings(namespace string) ConnectorBindingInterface
}

// ConnectorBindingInterface has methods to work with ConnectorBinding resources.
type ConnectorBindingInterface interface {
	Create(ctx context.Context, connectorBinding *v1.ConnectorBinding, opts metav1.CreateOptions) (*v1.ConnectorBinding, error)
	Update(ctx context.Context, connectorBinding *v1.ConnectorBinding, opts metav1.UpdateOptions) (*v1.ConnectorBinding, error)
	UpdateStatus(ctx context.Context, connectorBinding *v1.ConnectorBinding, opts metav1.UpdateOptions) (*v1.ConnectorBinding, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.ConnectorBinding, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.ConnectorBindingList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ConnectorBinding, err error)
	Apply(ctx context.Context, connectorBinding *walruscorev1.ConnectorBindingApplyConfiguration, opts metav1.ApplyOptions) (result *v1.ConnectorBinding, err error)
	ApplyStatus(ctx context.Context, connectorBinding *walruscorev1.ConnectorBindingApplyConfiguration, opts metav1.ApplyOptions) (result *v1.ConnectorBinding, err error)
	ConnectorBindingExpansion
}

// connectorBindings implements ConnectorBindingInterface
type connectorBindings struct {
	client rest.Interface
	ns     string
}

// newConnectorBindings returns a ConnectorBindings
func newConnectorBindings(c *WalruscoreV1Client, namespace string) *connectorBindings {
	return &connectorBindings{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the connectorBinding, and returns the corresponding connectorBinding object, and an error if there is any.
func (c *connectorBindings) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.ConnectorBinding, err error) {
	result = &v1.ConnectorBinding{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("connectorbindings").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ConnectorBindings that match those selectors.
func (c *connectorBindings) List(ctx context.Context, opts metav1.ListOptions) (result *v1.ConnectorBindingList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.ConnectorBindingList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("connectorbindings").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested connectorBindings.
func (c *connectorBindings) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("connectorbindings").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a connectorBinding and creates it.  Returns the server's representation of the connectorBinding, and an error, if there is any.
func (c *connectorBindings) Create(ctx context.Context, connectorBinding *v1.ConnectorBinding, opts metav1.CreateOptions) (result *v1.ConnectorBinding, err error) {
	result = &v1.ConnectorBinding{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("connectorbindings").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(connectorBinding).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a connectorBinding and updates it. Returns the server's representation of the connectorBinding, and an error, if there is any.
func (c *connectorBindings) Update(ctx context.Context, connectorBinding *v1.ConnectorBinding, opts metav1.UpdateOptions) (result *v1.ConnectorBinding, err error) {
	result = &v1.ConnectorBinding{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("connectorbindings").
		Name(connectorBinding.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(connectorBinding).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *connectorBindings) UpdateStatus(ctx context.Context, connectorBinding *v1.ConnectorBinding, opts metav1.UpdateOptions) (result *v1.ConnectorBinding, err error) {
	result = &v1.ConnectorBinding{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("connectorbindings").
		Name(connectorBinding.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(connectorBinding).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the connectorBinding and deletes it. Returns an error if one occurs.
func (c *connectorBindings) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("connectorbindings").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *connectorBindings) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("connectorbindings").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched connectorBinding.
func (c *connectorBindings) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.ConnectorBinding, err error) {
	result = &v1.ConnectorBinding{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("connectorbindings").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// Apply takes the given apply declarative configuration, applies it and returns the applied connectorBinding.
func (c *connectorBindings) Apply(ctx context.Context, connectorBinding *walruscorev1.ConnectorBindingApplyConfiguration, opts metav1.ApplyOptions) (result *v1.ConnectorBinding, err error) {
	if connectorBinding == nil {
		return nil, fmt.Errorf("connectorBinding provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(connectorBinding)
	if err != nil {
		return nil, err
	}
	name := connectorBinding.Name
	if name == nil {
		return nil, fmt.Errorf("connectorBinding.Name must be provided to Apply")
	}
	result = &v1.ConnectorBinding{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("connectorbindings").
		Name(*name).
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *connectorBindings) ApplyStatus(ctx context.Context, connectorBinding *walruscorev1.ConnectorBindingApplyConfiguration, opts metav1.ApplyOptions) (result *v1.ConnectorBinding, err error) {
	if connectorBinding == nil {
		return nil, fmt.Errorf("connectorBinding provided to Apply must not be nil")
	}
	patchOpts := opts.ToPatchOptions()
	data, err := json.Marshal(connectorBinding)
	if err != nil {
		return nil, err
	}

	name := connectorBinding.Name
	if name == nil {
		return nil, fmt.Errorf("connectorBinding.Name must be provided to Apply")
	}

	result = &v1.ConnectorBinding{}
	err = c.client.Patch(types.ApplyPatchType).
		Namespace(c.ns).
		Resource("connectorbindings").
		Name(*name).
		SubResource("status").
		VersionedParams(&patchOpts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
